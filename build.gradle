plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.6'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.67'
  id 'io.freefair.lombok' version '8.14'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'rpts-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'fact-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

task integration(type: Test) {

  // Since the cron task does not run functional tests, as it is registered as a nonserviceapp()
  // we need to set up the values for the integration tests to ensure we can check the connection
  // to the Storage Account and so forth
  doFirst() {
    // On the pipeline this will not exist so will default to local SA etc
    if (System.getenv("INT_ENVS_ENABLED") != null) {
      if (System.getenv("STORAGE_ACCOUNT_CONNECTION_STRING") == null) {
        exec {
          commandLine 'az', 'login', '--identity'
        }
        println("Loading secrets from vault for INT tests")
        systemProperty 'STORAGE_ACCOUNT_CONNECTION_STRING', getVaultSecret('storage-account-connection-string')
      } else {
        println('Not logging into Azure; specified secret found');
      }
    }
  }

  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "fact :: fact-cron-trigger"
    property "sonar.projectKey", "uk.gov.hmcts.reform:fact-cron-trigger"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'com.azure.spring', name: 'spring-cloud-azure-starter-storage-blob', version: '6.0.0'
  implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.19.2'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

mainClassName = 'uk.gov.hmcts.reform.fact.Application'

bootJar {
  archiveFileName = "fact-cron-trigger.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

configurations.configureEach {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails det ->
      // CVE-2025-48976
      if (det.requested.name == 'commons-fileupload') {
        det.useVersion '1.6.0'
      }
      // CVE-2025-48924
      if (det.requested.group == 'org.apache.commons' && det.requested.name == 'commons-lang3') {
        det.useVersion '3.18.0'
      }
    }
  }
}
